// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Entry {
  id        Int       @id @default(autoincrement())
  pageName  String    @unique
  pageTitle String    @default("")
  source    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tags      Tag[]
  revision  Int
  history   History[]

  @@index([pageName], name: "pageName")
}

model History {
  id        Int      @id @default(autoincrement())
  entry     Entry    @relation(fields: [entryId], references: [id])
  entryId   Int
  source    String
  revision  Int
  createdAt DateTime @default(now())

  @@unique([entryId, revision])
}

model Tag {
  id      Int     @id @default(autoincrement())
  tagName String  @unique
  entries Entry[]

  @@index([tagName], name: "tagName")
}

model ObjectDirectory {
  id           Int           @id @default(autoincrement())
  keyPrefix    String        @unique
  imageObjects ImageObject[]

  @@index([keyPrefix], name: "keyPrefix")
}

model ImageObject {
  id                Int             @id @default(autoincrement())
  key               String          @unique
  directory         ObjectDirectory @relation(fields: [objectDirectoryId], references: [id])
  contentType       String
  width             Int
  height            Int
  size              Int
  verified          Verified        @default(PENDING)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  objectDirectoryId Int

  @@index([key], name: "key")
}

// ref https://next-auth.js.org/adapters/prisma
model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  role          Role      @default(VISITOR)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

enum Role {
  VISITOR
  USER
  ADMIN
}

enum Verified {
  PENDING
  VERIFIED
  TIMEOUT
  ERROR
}
